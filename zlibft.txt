# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    zlibft.txt                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rdhaibi <rdhaibi@student.42tokyo.jp>       +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/08/25 14:01:13 by rdhaibi           #+#    #+#              #
#    Updated: 2025/09/03 21:23:10 by rdhaibi          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "minishell.h"

int	ft_strcmp(char *s1, char *s2)//2
{
	while (*s1 && (*s1 == *s2))
	{
		s1 += 1;
		s2 += 1;
	}
	return (*s1 - *s2);
}

size_t	ft_strlen(const char *str) //1
{
	size_t	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}

size_t	ft_strlcpy(char *dest, const char *src, size_t n)//1
{
	size_t	i;

	i = 0;
	if (n != 0)
	{
		while ((src[i] != '\0') && i < n - 1)
		{
			dest[i] = src[i];
			i++;
		}
		dest[i] = '\0';
	}
	return (ft_strlen(src));
}

char	*ft_strdup(const char *s1)//1
{
	size_t		l;
	const char	*s2;

	l = ft_strlen(s1);
	s2 = malloc((sizeof(char) * l) + 1);
	if (s2 == NULL)
		return (NULL);
	ft_strlcpy((char *)s2, s1, l + 1);
	return ((char *)s2);
}

char	*ft_substr(char const *s, unsigned int start, size_t len)//1
{
	char	*str;
	size_t	l;
	size_t	n;

	if (!s)
		return (NULL);
	n = ft_strlen(s);
	if (start >= n)
		return (ft_strdup(""));
	if (start + len > n)
		l = n - start;
	else
		l = len;
	str = malloc((sizeof(char) * l) + 1);
	if (str == NULL)
		return (NULL);
	ft_strlcpy(((char *)str), (s + start), l + 1);
	return (str);
}

char	*ft_strjoin(char const *s1, char const *s2)//1
{
	size_t	i;
	size_t	j;
	size_t	l1;
	size_t	l2;
	char	*str;

	i = -1;
	j = -1;
	l1 = ft_strlen(s1);
	l2 = ft_strlen(s2);
	str = malloc(sizeof(char) * (l1 + l2) + 1);
	if (str == NULL)
		return (NULL);
	while (++i < l1)
		str[i] = s1[i];
	while (i < (l1 + l2))
	{
		str[i] = s2[++j];
		i++;
	}
	str[i] = '\0';
	return (str);
}

int	ft_strncmp(const char *s1, const char *s2, size_t n)//2
{
	size_t	i;

	i = 0;
	while (i < n)
	{
		if (s1[i] != s2[i])
			return ((unsigned char)s1[i] - (unsigned char)s2[i]);
		else if (s1[i] == '\0' || s2[i] == '\0')
			return (0);
		i++;
	}
	return (0);
}

static char	*edges(char const *s, char c, int *i)//3
{
	int	l1;
	int	l2;

	while (s[*i] == c)
		(*i)++;
	l1 = *i;
	while (s[*i] != '\0' && s[*i] != c)
		(*i)++;
	l2 = *i;
	return (ft_substr(s, l1, l2 - l1));
}

static int	wordsnum(char const *s, char c)//3
{
	int	n;

	n = 0;
	while (*s)
	{
		while (*s == c)
			s++;
		if (*s)
		{
			n++;
			while (*s && *s != c)
				s++;
		}
	}
	return (n);
}

int	ft_isalnum(char c)
{
	if (ft_isdigit(c) || ft_isalpha(c))
		return (1);
	else
		return (0);
}

char	**ft_split(char const *s, char c)//3
{
	int		i;
	int		j;
	char	**str;

	if (!s)
		return (NULL);
	str = malloc ((sizeof(char *)) * (wordsnum(s, c) + 1));
	if (!str)
		return (NULL);
	i = 0;
	j = 0;
	while (j < wordsnum(s, c))
	{
		str[j] = edges(s, c, &i);
		if (!str[j])
		{
			while (j--)
				free(str[j]);
			free(str);
			return (NULL);
		}
		j++;
	}
	str[j] = NULL;
	return (str);
}
